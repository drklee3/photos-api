### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Album {
  author: User!
  createdAt: DateTime!
  description: String
  id: String!
  members(after: UserOnAlbumWhereUniqueInput, before: UserOnAlbumWhereUniqueInput, first: Int, last: Int): [UserOnAlbum!]!
  photos(after: PhotoOnAlbumWhereUniqueInput, before: PhotoOnAlbumWhereUniqueInput, first: Int, last: Int): [PhotoOnAlbum!]!
  title: String!
  updatedAt: DateTime!
  viewCount: Int!
  visibility: Visibility!
}

input AlbumCreateInput {
  author: UserCreateNestedOneWithoutAlbumsInput!
  createdAt: DateTime
  description: String
  id: String
  members: UserOnAlbumCreateNestedManyWithoutAlbumInput
  photos: PhotoOnAlbumCreateNestedManyWithoutAlbumInput
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input AlbumCreateManyAuthorInput {
  createdAt: DateTime
  description: String
  id: String
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input AlbumCreateManyAuthorInputEnvelope {
  data: [AlbumCreateManyAuthorInput!]
  skipDuplicates: Boolean
}

input AlbumCreateNestedManyWithoutAuthorInput {
  connect: [AlbumWhereUniqueInput!]
  connectOrCreate: [AlbumCreateOrConnectWithoutAuthorInput!]
  create: [AlbumCreateWithoutAuthorInput!]
  createMany: AlbumCreateManyAuthorInputEnvelope
}

input AlbumCreateNestedOneWithoutMembersInput {
  connect: AlbumWhereUniqueInput
  connectOrCreate: AlbumCreateOrConnectWithoutMembersInput
  create: AlbumCreateWithoutMembersInput
}

input AlbumCreateNestedOneWithoutPhotosInput {
  connect: AlbumWhereUniqueInput
  connectOrCreate: AlbumCreateOrConnectWithoutPhotosInput
  create: AlbumCreateWithoutPhotosInput
}

input AlbumCreateOrConnectWithoutAuthorInput {
  create: AlbumCreateWithoutAuthorInput!
  where: AlbumWhereUniqueInput!
}

input AlbumCreateOrConnectWithoutMembersInput {
  create: AlbumCreateWithoutMembersInput!
  where: AlbumWhereUniqueInput!
}

input AlbumCreateOrConnectWithoutPhotosInput {
  create: AlbumCreateWithoutPhotosInput!
  where: AlbumWhereUniqueInput!
}

input AlbumCreateWithoutAuthorInput {
  createdAt: DateTime
  description: String
  id: String
  members: UserOnAlbumCreateNestedManyWithoutAlbumInput
  photos: PhotoOnAlbumCreateNestedManyWithoutAlbumInput
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input AlbumCreateWithoutMembersInput {
  author: UserCreateNestedOneWithoutAlbumsInput!
  createdAt: DateTime
  description: String
  id: String
  photos: PhotoOnAlbumCreateNestedManyWithoutAlbumInput
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input AlbumCreateWithoutPhotosInput {
  author: UserCreateNestedOneWithoutAlbumsInput!
  createdAt: DateTime
  description: String
  id: String
  members: UserOnAlbumCreateNestedManyWithoutAlbumInput
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input AlbumListRelationFilter {
  every: AlbumWhereInput
  none: AlbumWhereInput
  some: AlbumWhereInput
}

input AlbumOrderByRelationAggregateInput {
  _count: SortOrder
}

input AlbumOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  members: UserOnAlbumOrderByRelationAggregateInput
  photos: PhotoOnAlbumOrderByRelationAggregateInput
  title: SortOrder
  updatedAt: SortOrder
  viewCount: SortOrder
  visibility: SortOrder
}

"""User role of an album"""
enum AlbumPermissions {
  COMMENTER
  EDITOR
  VIEWER
}

enum AlbumRole {
  COMMENTOR
  EDITOR
  VIEWER
}

input AlbumScalarWhereInput {
  AND: [AlbumScalarWhereInput!]
  NOT: [AlbumScalarWhereInput!]
  OR: [AlbumScalarWhereInput!]
  authorId: StringFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  viewCount: IntFilter
  visibility: EnumVisibilityFilter
}

input AlbumUpdateInput {
  author: UserUpdateOneRequiredWithoutAlbumsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  members: UserOnAlbumUpdateManyWithoutAlbumInput
  photos: PhotoOnAlbumUpdateManyWithoutAlbumInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input AlbumUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input AlbumUpdateManyWithWhereWithoutAuthorInput {
  data: AlbumUpdateManyMutationInput!
  where: AlbumScalarWhereInput!
}

input AlbumUpdateManyWithoutAuthorInput {
  connect: [AlbumWhereUniqueInput!]
  connectOrCreate: [AlbumCreateOrConnectWithoutAuthorInput!]
  create: [AlbumCreateWithoutAuthorInput!]
  createMany: AlbumCreateManyAuthorInputEnvelope
  delete: [AlbumWhereUniqueInput!]
  deleteMany: [AlbumScalarWhereInput!]
  disconnect: [AlbumWhereUniqueInput!]
  set: [AlbumWhereUniqueInput!]
  update: [AlbumUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [AlbumUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [AlbumUpsertWithWhereUniqueWithoutAuthorInput!]
}

input AlbumUpdateOneRequiredWithoutMembersInput {
  connect: AlbumWhereUniqueInput
  connectOrCreate: AlbumCreateOrConnectWithoutMembersInput
  create: AlbumCreateWithoutMembersInput
  update: AlbumUpdateWithoutMembersInput
  upsert: AlbumUpsertWithoutMembersInput
}

input AlbumUpdateOneRequiredWithoutPhotosInput {
  connect: AlbumWhereUniqueInput
  connectOrCreate: AlbumCreateOrConnectWithoutPhotosInput
  create: AlbumCreateWithoutPhotosInput
  update: AlbumUpdateWithoutPhotosInput
  upsert: AlbumUpsertWithoutPhotosInput
}

input AlbumUpdateWithWhereUniqueWithoutAuthorInput {
  data: AlbumUpdateWithoutAuthorInput!
  where: AlbumWhereUniqueInput!
}

input AlbumUpdateWithoutAuthorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  members: UserOnAlbumUpdateManyWithoutAlbumInput
  photos: PhotoOnAlbumUpdateManyWithoutAlbumInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input AlbumUpdateWithoutMembersInput {
  author: UserUpdateOneRequiredWithoutAlbumsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  photos: PhotoOnAlbumUpdateManyWithoutAlbumInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input AlbumUpdateWithoutPhotosInput {
  author: UserUpdateOneRequiredWithoutAlbumsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  members: UserOnAlbumUpdateManyWithoutAlbumInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input AlbumUpsertWithWhereUniqueWithoutAuthorInput {
  create: AlbumCreateWithoutAuthorInput!
  update: AlbumUpdateWithoutAuthorInput!
  where: AlbumWhereUniqueInput!
}

input AlbumUpsertWithoutMembersInput {
  create: AlbumCreateWithoutMembersInput!
  update: AlbumUpdateWithoutMembersInput!
}

input AlbumUpsertWithoutPhotosInput {
  create: AlbumCreateWithoutPhotosInput!
  update: AlbumUpdateWithoutPhotosInput!
}

input AlbumWhereInput {
  AND: [AlbumWhereInput!]
  NOT: [AlbumWhereInput!]
  OR: [AlbumWhereInput!]
  author: UserWhereInput
  authorId: StringFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  members: UserOnAlbumListRelationFilter
  photos: PhotoOnAlbumListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  viewCount: IntFilter
  visibility: EnumVisibilityFilter
}

input AlbumWhereUniqueInput {
  id: String
}

type Comment {
  author: User!
  content: String!
  createdAt: DateTime!
  id: String!
  photo: PhotoOnAlbum!
  updatedAt: DateTime!
}

input CommentCreateInput {
  author: UserCreateNestedOneWithoutCommentsInput!
  content: String!
  createdAt: DateTime
  id: String
  photo: PhotoOnAlbumCreateNestedOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateManyAuthorInput {
  PhotoOnAlbumAlbumId: String!
  PhotoOnAlbumPhotoId: String!
  content: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input CommentCreateManyAuthorInputEnvelope {
  data: [CommentCreateManyAuthorInput!]
  skipDuplicates: Boolean
}

input CommentCreateManyPhotoInput {
  authorId: String!
  content: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input CommentCreateManyPhotoInputEnvelope {
  data: [CommentCreateManyPhotoInput!]
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  createMany: CommentCreateManyAuthorInputEnvelope
}

input CommentCreateNestedManyWithoutPhotoInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPhotoInput!]
  create: [CommentCreateWithoutPhotoInput!]
  createMany: CommentCreateManyPhotoInputEnvelope
}

input CommentCreateOrConnectWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutPhotoInput {
  create: CommentCreateWithoutPhotoInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutAuthorInput {
  content: String!
  createdAt: DateTime
  id: String
  photo: PhotoOnAlbumCreateNestedOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateWithoutPhotoInput {
  author: UserCreateNestedOneWithoutCommentsInput!
  content: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByWithRelationInput {
  PhotoOnAlbumAlbumId: SortOrder
  PhotoOnAlbumPhotoId: SortOrder
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  photo: PhotoOnAlbumOrderByWithRelationInput
  updatedAt: SortOrder
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  PhotoOnAlbumAlbumId: StringFilter
  PhotoOnAlbumPhotoId: StringFilter
  authorId: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input CommentUpdateInput {
  author: UserUpdateOneRequiredWithoutCommentsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  photo: PhotoOnAlbumUpdateOneRequiredWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutAuthorInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutPhotoInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  createMany: CommentCreateManyAuthorInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPhotoInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPhotoInput!]
  create: [CommentCreateWithoutPhotoInput!]
  createMany: CommentCreateManyPhotoInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPhotoInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutPhotoInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPhotoInput!]
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutPhotoInput {
  data: CommentUpdateWithoutPhotoInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutAuthorInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  photo: PhotoOnAlbumUpdateOneRequiredWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutPhotoInput {
  author: UserUpdateOneRequiredWithoutCommentsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  update: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutPhotoInput {
  create: CommentCreateWithoutPhotoInput!
  update: CommentUpdateWithoutPhotoInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  PhotoOnAlbumAlbumId: StringFilter
  PhotoOnAlbumPhotoId: StringFilter
  author: UserWhereInput
  authorId: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  photo: PhotoOnAlbumWhereInput
  updatedAt: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumAlbumRoleFieldUpdateOperationsInput {
  set: AlbumRole
}

input EnumAlbumRoleFilter {
  equals: AlbumRole
  in: [AlbumRole!]
  not: NestedEnumAlbumRoleFilter
  notIn: [AlbumRole!]
}

input EnumVisibilityFieldUpdateOperationsInput {
  set: Visibility
}

input EnumVisibilityFilter {
  equals: Visibility
  in: [Visibility!]
  not: NestedEnumVisibilityFilter
  notIn: [Visibility!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

scalar Json

type Like {
  author: User!
  createdAt: DateTime!
  id: String!
  photo: PhotoOnAlbum!
}

input LikeCreateManyAuthorInput {
  PhotoOnAlbumAlbumId: String!
  PhotoOnAlbumPhotoId: String!
  createdAt: DateTime
  id: String
}

input LikeCreateManyAuthorInputEnvelope {
  data: [LikeCreateManyAuthorInput!]
  skipDuplicates: Boolean
}

input LikeCreateManyPhotoInput {
  authorId: String!
  createdAt: DateTime
  id: String
}

input LikeCreateManyPhotoInputEnvelope {
  data: [LikeCreateManyPhotoInput!]
  skipDuplicates: Boolean
}

input LikeCreateNestedManyWithoutAuthorInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutAuthorInput!]
  create: [LikeCreateWithoutAuthorInput!]
  createMany: LikeCreateManyAuthorInputEnvelope
}

input LikeCreateNestedManyWithoutPhotoInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutPhotoInput!]
  create: [LikeCreateWithoutPhotoInput!]
  createMany: LikeCreateManyPhotoInputEnvelope
}

input LikeCreateOrConnectWithoutAuthorInput {
  create: LikeCreateWithoutAuthorInput!
  where: LikeWhereUniqueInput!
}

input LikeCreateOrConnectWithoutPhotoInput {
  create: LikeCreateWithoutPhotoInput!
  where: LikeWhereUniqueInput!
}

input LikeCreateWithoutAuthorInput {
  createdAt: DateTime
  id: String
  photo: PhotoOnAlbumCreateNestedOneWithoutLikesInput!
}

input LikeCreateWithoutPhotoInput {
  author: UserCreateNestedOneWithoutLikeInput!
  createdAt: DateTime
  id: String
}

input LikeListRelationFilter {
  every: LikeWhereInput
  none: LikeWhereInput
  some: LikeWhereInput
}

input LikeOrderByRelationAggregateInput {
  _count: SortOrder
}

input LikeScalarWhereInput {
  AND: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  PhotoOnAlbumAlbumId: StringFilter
  PhotoOnAlbumPhotoId: StringFilter
  authorId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
}

input LikeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input LikeUpdateManyWithWhereWithoutAuthorInput {
  data: LikeUpdateManyMutationInput!
  where: LikeScalarWhereInput!
}

input LikeUpdateManyWithWhereWithoutPhotoInput {
  data: LikeUpdateManyMutationInput!
  where: LikeScalarWhereInput!
}

input LikeUpdateManyWithoutAuthorInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutAuthorInput!]
  create: [LikeCreateWithoutAuthorInput!]
  createMany: LikeCreateManyAuthorInputEnvelope
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [LikeUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutAuthorInput!]
}

input LikeUpdateManyWithoutPhotoInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutPhotoInput!]
  create: [LikeCreateWithoutPhotoInput!]
  createMany: LikeCreateManyPhotoInputEnvelope
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutPhotoInput!]
  updateMany: [LikeUpdateManyWithWhereWithoutPhotoInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutPhotoInput!]
}

input LikeUpdateWithWhereUniqueWithoutAuthorInput {
  data: LikeUpdateWithoutAuthorInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutPhotoInput {
  data: LikeUpdateWithoutPhotoInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithoutAuthorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  photo: PhotoOnAlbumUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateWithoutPhotoInput {
  author: UserUpdateOneRequiredWithoutLikeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input LikeUpsertWithWhereUniqueWithoutAuthorInput {
  create: LikeCreateWithoutAuthorInput!
  update: LikeUpdateWithoutAuthorInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutPhotoInput {
  create: LikeCreateWithoutPhotoInput!
  update: LikeUpdateWithoutPhotoInput!
  where: LikeWhereUniqueInput!
}

input LikeWhereInput {
  AND: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  PhotoOnAlbumAlbumId: StringFilter
  PhotoOnAlbumPhotoId: StringFilter
  author: UserWhereInput
  authorId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  photo: PhotoOnAlbumWhereInput
}

input LikeWhereUniqueInput {
  id: String
}

type Mutation {
  createOneAlbum(data: AlbumCreateInput!): Album!
  createOneComment(data: CommentCreateInput!): Comment!
  createOnePhotoOnAlbum(data: PhotoOnAlbumCreateInput!): PhotoOnAlbum!
  deleteOneAlbum(where: AlbumWhereUniqueInput!): Album
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOnePhoto(where: PhotoWhereUniqueInput!): Photo
  deleteOnePhotoOnAlbum(where: PhotoOnAlbumWhereUniqueInput!): PhotoOnAlbum
  deleteOneUser(where: UserWhereUniqueInput!): User
  incrementAlbumViewCount(id: String!): Album
  shareAlbum(albumId: String!, role: AlbumRole!, targetUserId: String!): Album
  updateOneAlbum(data: AlbumUpdateInput!, where: AlbumWhereUniqueInput!): Album
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOnePhoto(data: PhotoUpdateInput!, where: PhotoWhereUniqueInput!): Photo
  updateOnePhotoOnAlbum(data: PhotoOnAlbumUpdateInput!, where: PhotoOnAlbumWhereUniqueInput!): PhotoOnAlbum
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumAlbumRoleFilter {
  equals: AlbumRole
  in: [AlbumRole!]
  not: NestedEnumAlbumRoleFilter
  notIn: [AlbumRole!]
}

input NestedEnumVisibilityFilter {
  equals: Visibility
  in: [Visibility!]
  not: NestedEnumVisibilityFilter
  notIn: [Visibility!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Photo {
  albums(after: PhotoOnAlbumWhereUniqueInput, before: PhotoOnAlbumWhereUniqueInput, first: Int, last: Int): [PhotoOnAlbum!]!
  author: User
  createdAt: DateTime!
  description: String
  exif: Json!
  fileName: String
  height: Int!
  id: String!
  mimetype: String!
  size: Int!
  title: String
  updatedAt: DateTime!

  """The public s3 url to GET this image. The size by default is LARGE."""
  url(size: PhotoSize): String
  width: Int!
}

input PhotoCreateManyAuthorInput {
  blurHash: String
  createdAt: DateTime
  description: String
  exif: Json
  fileName: String
  height: Int!
  id: String
  mimetype: String!
  size: Int!
  title: String
  updatedAt: DateTime
  width: Int!
}

input PhotoCreateManyAuthorInputEnvelope {
  data: [PhotoCreateManyAuthorInput!]
  skipDuplicates: Boolean
}

input PhotoCreateNestedManyWithoutAuthorInput {
  connect: [PhotoWhereUniqueInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutAuthorInput!]
  create: [PhotoCreateWithoutAuthorInput!]
  createMany: PhotoCreateManyAuthorInputEnvelope
}

input PhotoCreateNestedOneWithoutAlbumsInput {
  connect: PhotoWhereUniqueInput
  connectOrCreate: PhotoCreateOrConnectWithoutAlbumsInput
  create: PhotoCreateWithoutAlbumsInput
}

input PhotoCreateOrConnectWithoutAlbumsInput {
  create: PhotoCreateWithoutAlbumsInput!
  where: PhotoWhereUniqueInput!
}

input PhotoCreateOrConnectWithoutAuthorInput {
  create: PhotoCreateWithoutAuthorInput!
  where: PhotoWhereUniqueInput!
}

input PhotoCreateWithoutAlbumsInput {
  author: UserCreateNestedOneWithoutPhotosInput
  blurHash: String
  createdAt: DateTime
  description: String
  exif: Json
  fileName: String
  height: Int!
  id: String
  mimetype: String!
  size: Int!
  title: String
  updatedAt: DateTime
  width: Int!
}

input PhotoCreateWithoutAuthorInput {
  albums: PhotoOnAlbumCreateNestedManyWithoutPhotoInput
  blurHash: String
  createdAt: DateTime
  description: String
  exif: Json
  fileName: String
  height: Int!
  id: String
  mimetype: String!
  size: Int!
  title: String
  updatedAt: DateTime
  width: Int!
}

input PhotoListRelationFilter {
  every: PhotoWhereInput
  none: PhotoWhereInput
  some: PhotoWhereInput
}

type PhotoOnAlbum {
  addedAt: DateTime!
  album: Album!
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  likes(after: LikeWhereUniqueInput, before: LikeWhereUniqueInput, first: Int, last: Int): [Like!]!
  photo: Photo!
}

input PhotoOnAlbumAlbumIdPhotoIdCompoundUniqueInput {
  albumId: String!
  photoId: String!
}

input PhotoOnAlbumCreateInput {
  addedAt: DateTime
  album: AlbumCreateNestedOneWithoutPhotosInput!
  comments: CommentCreateNestedManyWithoutPhotoInput
  likes: LikeCreateNestedManyWithoutPhotoInput
  photo: PhotoCreateNestedOneWithoutAlbumsInput!
}

input PhotoOnAlbumCreateManyAlbumInput {
  addedAt: DateTime
  photoId: String!
}

input PhotoOnAlbumCreateManyAlbumInputEnvelope {
  data: [PhotoOnAlbumCreateManyAlbumInput!]
  skipDuplicates: Boolean
}

input PhotoOnAlbumCreateManyPhotoInput {
  addedAt: DateTime
  albumId: String!
}

input PhotoOnAlbumCreateManyPhotoInputEnvelope {
  data: [PhotoOnAlbumCreateManyPhotoInput!]
  skipDuplicates: Boolean
}

input PhotoOnAlbumCreateNestedManyWithoutAlbumInput {
  connect: [PhotoOnAlbumWhereUniqueInput!]
  connectOrCreate: [PhotoOnAlbumCreateOrConnectWithoutAlbumInput!]
  create: [PhotoOnAlbumCreateWithoutAlbumInput!]
  createMany: PhotoOnAlbumCreateManyAlbumInputEnvelope
}

input PhotoOnAlbumCreateNestedManyWithoutPhotoInput {
  connect: [PhotoOnAlbumWhereUniqueInput!]
  connectOrCreate: [PhotoOnAlbumCreateOrConnectWithoutPhotoInput!]
  create: [PhotoOnAlbumCreateWithoutPhotoInput!]
  createMany: PhotoOnAlbumCreateManyPhotoInputEnvelope
}

input PhotoOnAlbumCreateNestedOneWithoutCommentsInput {
  connect: PhotoOnAlbumWhereUniqueInput
  connectOrCreate: PhotoOnAlbumCreateOrConnectWithoutCommentsInput
  create: PhotoOnAlbumCreateWithoutCommentsInput
}

input PhotoOnAlbumCreateNestedOneWithoutLikesInput {
  connect: PhotoOnAlbumWhereUniqueInput
  connectOrCreate: PhotoOnAlbumCreateOrConnectWithoutLikesInput
  create: PhotoOnAlbumCreateWithoutLikesInput
}

input PhotoOnAlbumCreateOrConnectWithoutAlbumInput {
  create: PhotoOnAlbumCreateWithoutAlbumInput!
  where: PhotoOnAlbumWhereUniqueInput!
}

input PhotoOnAlbumCreateOrConnectWithoutCommentsInput {
  create: PhotoOnAlbumCreateWithoutCommentsInput!
  where: PhotoOnAlbumWhereUniqueInput!
}

input PhotoOnAlbumCreateOrConnectWithoutLikesInput {
  create: PhotoOnAlbumCreateWithoutLikesInput!
  where: PhotoOnAlbumWhereUniqueInput!
}

input PhotoOnAlbumCreateOrConnectWithoutPhotoInput {
  create: PhotoOnAlbumCreateWithoutPhotoInput!
  where: PhotoOnAlbumWhereUniqueInput!
}

input PhotoOnAlbumCreateWithoutAlbumInput {
  addedAt: DateTime
  comments: CommentCreateNestedManyWithoutPhotoInput
  likes: LikeCreateNestedManyWithoutPhotoInput
  photo: PhotoCreateNestedOneWithoutAlbumsInput!
}

input PhotoOnAlbumCreateWithoutCommentsInput {
  addedAt: DateTime
  album: AlbumCreateNestedOneWithoutPhotosInput!
  likes: LikeCreateNestedManyWithoutPhotoInput
  photo: PhotoCreateNestedOneWithoutAlbumsInput!
}

input PhotoOnAlbumCreateWithoutLikesInput {
  addedAt: DateTime
  album: AlbumCreateNestedOneWithoutPhotosInput!
  comments: CommentCreateNestedManyWithoutPhotoInput
  photo: PhotoCreateNestedOneWithoutAlbumsInput!
}

input PhotoOnAlbumCreateWithoutPhotoInput {
  addedAt: DateTime
  album: AlbumCreateNestedOneWithoutPhotosInput!
  comments: CommentCreateNestedManyWithoutPhotoInput
  likes: LikeCreateNestedManyWithoutPhotoInput
}

input PhotoOnAlbumListRelationFilter {
  every: PhotoOnAlbumWhereInput
  none: PhotoOnAlbumWhereInput
  some: PhotoOnAlbumWhereInput
}

input PhotoOnAlbumOrderByRelationAggregateInput {
  _count: SortOrder
}

input PhotoOnAlbumOrderByWithRelationInput {
  addedAt: SortOrder
  album: AlbumOrderByWithRelationInput
  albumId: SortOrder
  comments: CommentOrderByRelationAggregateInput
  likes: LikeOrderByRelationAggregateInput
  photo: PhotoOrderByWithRelationInput
  photoId: SortOrder
}

input PhotoOnAlbumScalarWhereInput {
  AND: [PhotoOnAlbumScalarWhereInput!]
  NOT: [PhotoOnAlbumScalarWhereInput!]
  OR: [PhotoOnAlbumScalarWhereInput!]
  addedAt: DateTimeFilter
  albumId: StringFilter
  photoId: StringFilter
}

input PhotoOnAlbumUpdateInput {
  addedAt: DateTimeFieldUpdateOperationsInput
  album: AlbumUpdateOneRequiredWithoutPhotosInput
  comments: CommentUpdateManyWithoutPhotoInput
  likes: LikeUpdateManyWithoutPhotoInput
  photo: PhotoUpdateOneRequiredWithoutAlbumsInput
}

input PhotoOnAlbumUpdateManyMutationInput {
  addedAt: DateTimeFieldUpdateOperationsInput
}

input PhotoOnAlbumUpdateManyWithWhereWithoutAlbumInput {
  data: PhotoOnAlbumUpdateManyMutationInput!
  where: PhotoOnAlbumScalarWhereInput!
}

input PhotoOnAlbumUpdateManyWithWhereWithoutPhotoInput {
  data: PhotoOnAlbumUpdateManyMutationInput!
  where: PhotoOnAlbumScalarWhereInput!
}

input PhotoOnAlbumUpdateManyWithoutAlbumInput {
  connect: [PhotoOnAlbumWhereUniqueInput!]
  connectOrCreate: [PhotoOnAlbumCreateOrConnectWithoutAlbumInput!]
  create: [PhotoOnAlbumCreateWithoutAlbumInput!]
  createMany: PhotoOnAlbumCreateManyAlbumInputEnvelope
  delete: [PhotoOnAlbumWhereUniqueInput!]
  deleteMany: [PhotoOnAlbumScalarWhereInput!]
  disconnect: [PhotoOnAlbumWhereUniqueInput!]
  set: [PhotoOnAlbumWhereUniqueInput!]
  update: [PhotoOnAlbumUpdateWithWhereUniqueWithoutAlbumInput!]
  updateMany: [PhotoOnAlbumUpdateManyWithWhereWithoutAlbumInput!]
  upsert: [PhotoOnAlbumUpsertWithWhereUniqueWithoutAlbumInput!]
}

input PhotoOnAlbumUpdateManyWithoutPhotoInput {
  connect: [PhotoOnAlbumWhereUniqueInput!]
  connectOrCreate: [PhotoOnAlbumCreateOrConnectWithoutPhotoInput!]
  create: [PhotoOnAlbumCreateWithoutPhotoInput!]
  createMany: PhotoOnAlbumCreateManyPhotoInputEnvelope
  delete: [PhotoOnAlbumWhereUniqueInput!]
  deleteMany: [PhotoOnAlbumScalarWhereInput!]
  disconnect: [PhotoOnAlbumWhereUniqueInput!]
  set: [PhotoOnAlbumWhereUniqueInput!]
  update: [PhotoOnAlbumUpdateWithWhereUniqueWithoutPhotoInput!]
  updateMany: [PhotoOnAlbumUpdateManyWithWhereWithoutPhotoInput!]
  upsert: [PhotoOnAlbumUpsertWithWhereUniqueWithoutPhotoInput!]
}

input PhotoOnAlbumUpdateOneRequiredWithoutCommentsInput {
  connect: PhotoOnAlbumWhereUniqueInput
  connectOrCreate: PhotoOnAlbumCreateOrConnectWithoutCommentsInput
  create: PhotoOnAlbumCreateWithoutCommentsInput
  update: PhotoOnAlbumUpdateWithoutCommentsInput
  upsert: PhotoOnAlbumUpsertWithoutCommentsInput
}

input PhotoOnAlbumUpdateOneRequiredWithoutLikesInput {
  connect: PhotoOnAlbumWhereUniqueInput
  connectOrCreate: PhotoOnAlbumCreateOrConnectWithoutLikesInput
  create: PhotoOnAlbumCreateWithoutLikesInput
  update: PhotoOnAlbumUpdateWithoutLikesInput
  upsert: PhotoOnAlbumUpsertWithoutLikesInput
}

input PhotoOnAlbumUpdateWithWhereUniqueWithoutAlbumInput {
  data: PhotoOnAlbumUpdateWithoutAlbumInput!
  where: PhotoOnAlbumWhereUniqueInput!
}

input PhotoOnAlbumUpdateWithWhereUniqueWithoutPhotoInput {
  data: PhotoOnAlbumUpdateWithoutPhotoInput!
  where: PhotoOnAlbumWhereUniqueInput!
}

input PhotoOnAlbumUpdateWithoutAlbumInput {
  addedAt: DateTimeFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutPhotoInput
  likes: LikeUpdateManyWithoutPhotoInput
  photo: PhotoUpdateOneRequiredWithoutAlbumsInput
}

input PhotoOnAlbumUpdateWithoutCommentsInput {
  addedAt: DateTimeFieldUpdateOperationsInput
  album: AlbumUpdateOneRequiredWithoutPhotosInput
  likes: LikeUpdateManyWithoutPhotoInput
  photo: PhotoUpdateOneRequiredWithoutAlbumsInput
}

input PhotoOnAlbumUpdateWithoutLikesInput {
  addedAt: DateTimeFieldUpdateOperationsInput
  album: AlbumUpdateOneRequiredWithoutPhotosInput
  comments: CommentUpdateManyWithoutPhotoInput
  photo: PhotoUpdateOneRequiredWithoutAlbumsInput
}

input PhotoOnAlbumUpdateWithoutPhotoInput {
  addedAt: DateTimeFieldUpdateOperationsInput
  album: AlbumUpdateOneRequiredWithoutPhotosInput
  comments: CommentUpdateManyWithoutPhotoInput
  likes: LikeUpdateManyWithoutPhotoInput
}

input PhotoOnAlbumUpsertWithWhereUniqueWithoutAlbumInput {
  create: PhotoOnAlbumCreateWithoutAlbumInput!
  update: PhotoOnAlbumUpdateWithoutAlbumInput!
  where: PhotoOnAlbumWhereUniqueInput!
}

input PhotoOnAlbumUpsertWithWhereUniqueWithoutPhotoInput {
  create: PhotoOnAlbumCreateWithoutPhotoInput!
  update: PhotoOnAlbumUpdateWithoutPhotoInput!
  where: PhotoOnAlbumWhereUniqueInput!
}

input PhotoOnAlbumUpsertWithoutCommentsInput {
  create: PhotoOnAlbumCreateWithoutCommentsInput!
  update: PhotoOnAlbumUpdateWithoutCommentsInput!
}

input PhotoOnAlbumUpsertWithoutLikesInput {
  create: PhotoOnAlbumCreateWithoutLikesInput!
  update: PhotoOnAlbumUpdateWithoutLikesInput!
}

input PhotoOnAlbumWhereInput {
  AND: [PhotoOnAlbumWhereInput!]
  NOT: [PhotoOnAlbumWhereInput!]
  OR: [PhotoOnAlbumWhereInput!]
  addedAt: DateTimeFilter
  album: AlbumWhereInput
  albumId: StringFilter
  comments: CommentListRelationFilter
  likes: LikeListRelationFilter
  photo: PhotoWhereInput
  photoId: StringFilter
}

input PhotoOnAlbumWhereUniqueInput {
  albumId_photoId: PhotoOnAlbumAlbumIdPhotoIdCompoundUniqueInput
}

input PhotoOrderByRelationAggregateInput {
  _count: SortOrder
}

input PhotoOrderByWithRelationInput {
  albums: PhotoOnAlbumOrderByRelationAggregateInput
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  blurHash: SortOrder
  createdAt: SortOrder
  description: SortOrder
  exif: SortOrder
  fileName: SortOrder
  height: SortOrder
  id: SortOrder
  mimetype: SortOrder
  size: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  width: SortOrder
}

input PhotoScalarWhereInput {
  AND: [PhotoScalarWhereInput!]
  NOT: [PhotoScalarWhereInput!]
  OR: [PhotoScalarWhereInput!]
  authorId: StringNullableFilter
  blurHash: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  fileName: StringNullableFilter
  height: IntFilter
  id: StringFilter
  mimetype: StringFilter
  size: IntFilter
  title: StringNullableFilter
  updatedAt: DateTimeFilter
  width: IntFilter
}

"""The size of a photo"""
enum PhotoSize {
  FULL
  LARGE
  MEDIUM
  ORIGINAL
  SMALL
  THUMBNAIL
}

input PhotoUpdateInput {
  albums: PhotoOnAlbumUpdateManyWithoutPhotoInput
  author: UserUpdateOneWithoutPhotosInput
  blurHash: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  exif: Json
  fileName: NullableStringFieldUpdateOperationsInput
  height: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mimetype: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: IntFieldUpdateOperationsInput
}

input PhotoUpdateManyMutationInput {
  blurHash: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  exif: Json
  fileName: NullableStringFieldUpdateOperationsInput
  height: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mimetype: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: IntFieldUpdateOperationsInput
}

input PhotoUpdateManyWithWhereWithoutAuthorInput {
  data: PhotoUpdateManyMutationInput!
  where: PhotoScalarWhereInput!
}

input PhotoUpdateManyWithoutAuthorInput {
  connect: [PhotoWhereUniqueInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutAuthorInput!]
  create: [PhotoCreateWithoutAuthorInput!]
  createMany: PhotoCreateManyAuthorInputEnvelope
  delete: [PhotoWhereUniqueInput!]
  deleteMany: [PhotoScalarWhereInput!]
  disconnect: [PhotoWhereUniqueInput!]
  set: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PhotoUpdateOneRequiredWithoutAlbumsInput {
  connect: PhotoWhereUniqueInput
  connectOrCreate: PhotoCreateOrConnectWithoutAlbumsInput
  create: PhotoCreateWithoutAlbumsInput
  update: PhotoUpdateWithoutAlbumsInput
  upsert: PhotoUpsertWithoutAlbumsInput
}

input PhotoUpdateWithWhereUniqueWithoutAuthorInput {
  data: PhotoUpdateWithoutAuthorInput!
  where: PhotoWhereUniqueInput!
}

input PhotoUpdateWithoutAlbumsInput {
  author: UserUpdateOneWithoutPhotosInput
  blurHash: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  exif: Json
  fileName: NullableStringFieldUpdateOperationsInput
  height: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mimetype: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: IntFieldUpdateOperationsInput
}

input PhotoUpdateWithoutAuthorInput {
  albums: PhotoOnAlbumUpdateManyWithoutPhotoInput
  blurHash: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  exif: Json
  fileName: NullableStringFieldUpdateOperationsInput
  height: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mimetype: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: IntFieldUpdateOperationsInput
}

input PhotoUpsertWithWhereUniqueWithoutAuthorInput {
  create: PhotoCreateWithoutAuthorInput!
  update: PhotoUpdateWithoutAuthorInput!
  where: PhotoWhereUniqueInput!
}

input PhotoUpsertWithoutAlbumsInput {
  create: PhotoCreateWithoutAlbumsInput!
  update: PhotoUpdateWithoutAlbumsInput!
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  albums: PhotoOnAlbumListRelationFilter
  author: UserWhereInput
  authorId: StringNullableFilter
  blurHash: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  fileName: StringNullableFilter
  height: IntFilter
  id: StringFilter
  mimetype: StringFilter
  size: IntFilter
  title: StringNullableFilter
  updatedAt: DateTimeFilter
  width: IntFilter
}

input PhotoWhereUniqueInput {
  id: String
}

type Query {
  album(where: AlbumWhereUniqueInput!): Album
  albums(after: AlbumWhereUniqueInput, before: AlbumWhereUniqueInput, first: Int, last: Int, orderBy: [AlbumOrderByWithRelationInput!], where: AlbumWhereInput): [Album!]!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int, orderBy: [CommentOrderByWithRelationInput!]): [Comment!]!
  currentUser: User
  photo(where: PhotoWhereUniqueInput!): Photo
  photos(after: PhotoWhereUniqueInput, before: PhotoWhereUniqueInput, first: Int, last: Int): [Photo!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByWithRelationInput!]): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  albums(after: AlbumWhereUniqueInput, before: AlbumWhereUniqueInput, first: Int, last: Int): [Album!]!
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  email: String!
  id: String!
  photos(after: PhotoWhereUniqueInput, before: PhotoWhereUniqueInput, first: Int, last: Int): [Photo!]!
  sharedAlbums(after: UserOnAlbumWhereUniqueInput, before: UserOnAlbumWhereUniqueInput, first: Int, last: Int): [UserOnAlbum!]!
  username: String!
}

input UserCreateNestedOneWithoutAlbumsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAlbumsInput
  create: UserCreateWithoutAlbumsInput
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutLikeInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutLikeInput
  create: UserCreateWithoutLikeInput
}

input UserCreateNestedOneWithoutPhotosInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPhotosInput
  create: UserCreateWithoutPhotosInput
}

input UserCreateNestedOneWithoutSharedAlbumsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSharedAlbumsInput
  create: UserCreateWithoutSharedAlbumsInput
}

input UserCreateOrConnectWithoutAlbumsInput {
  create: UserCreateWithoutAlbumsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutLikeInput {
  create: UserCreateWithoutLikeInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPhotosInput {
  create: UserCreateWithoutPhotosInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSharedAlbumsInput {
  create: UserCreateWithoutSharedAlbumsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAlbumsInput {
  Like: LikeCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  email: String!
  id: String
  photos: PhotoCreateNestedManyWithoutAuthorInput
  sharedAlbums: UserOnAlbumCreateNestedManyWithoutUserInput
  username: String!
}

input UserCreateWithoutCommentsInput {
  Like: LikeCreateNestedManyWithoutAuthorInput
  albums: AlbumCreateNestedManyWithoutAuthorInput
  email: String!
  id: String
  photos: PhotoCreateNestedManyWithoutAuthorInput
  sharedAlbums: UserOnAlbumCreateNestedManyWithoutUserInput
  username: String!
}

input UserCreateWithoutLikeInput {
  albums: AlbumCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  email: String!
  id: String
  photos: PhotoCreateNestedManyWithoutAuthorInput
  sharedAlbums: UserOnAlbumCreateNestedManyWithoutUserInput
  username: String!
}

input UserCreateWithoutPhotosInput {
  Like: LikeCreateNestedManyWithoutAuthorInput
  albums: AlbumCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  email: String!
  id: String
  sharedAlbums: UserOnAlbumCreateNestedManyWithoutUserInput
  username: String!
}

input UserCreateWithoutSharedAlbumsInput {
  Like: LikeCreateNestedManyWithoutAuthorInput
  albums: AlbumCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  email: String!
  id: String
  photos: PhotoCreateNestedManyWithoutAuthorInput
  username: String!
}

type UserOnAlbum {
  addedAt: DateTime!
  album: Album!
  role: AlbumRole!
  user: User!
}

input UserOnAlbumAlbumIdUserIdCompoundUniqueInput {
  albumId: String!
  userId: String!
}

input UserOnAlbumCreateManyAlbumInput {
  addedAt: DateTime
  role: AlbumRole
  userId: String!
}

input UserOnAlbumCreateManyAlbumInputEnvelope {
  data: [UserOnAlbumCreateManyAlbumInput!]
  skipDuplicates: Boolean
}

input UserOnAlbumCreateManyUserInput {
  addedAt: DateTime
  albumId: String!
  role: AlbumRole
}

input UserOnAlbumCreateManyUserInputEnvelope {
  data: [UserOnAlbumCreateManyUserInput!]
  skipDuplicates: Boolean
}

input UserOnAlbumCreateNestedManyWithoutAlbumInput {
  connect: [UserOnAlbumWhereUniqueInput!]
  connectOrCreate: [UserOnAlbumCreateOrConnectWithoutAlbumInput!]
  create: [UserOnAlbumCreateWithoutAlbumInput!]
  createMany: UserOnAlbumCreateManyAlbumInputEnvelope
}

input UserOnAlbumCreateNestedManyWithoutUserInput {
  connect: [UserOnAlbumWhereUniqueInput!]
  connectOrCreate: [UserOnAlbumCreateOrConnectWithoutUserInput!]
  create: [UserOnAlbumCreateWithoutUserInput!]
  createMany: UserOnAlbumCreateManyUserInputEnvelope
}

input UserOnAlbumCreateOrConnectWithoutAlbumInput {
  create: UserOnAlbumCreateWithoutAlbumInput!
  where: UserOnAlbumWhereUniqueInput!
}

input UserOnAlbumCreateOrConnectWithoutUserInput {
  create: UserOnAlbumCreateWithoutUserInput!
  where: UserOnAlbumWhereUniqueInput!
}

input UserOnAlbumCreateWithoutAlbumInput {
  addedAt: DateTime
  role: AlbumRole
  user: UserCreateNestedOneWithoutSharedAlbumsInput!
}

input UserOnAlbumCreateWithoutUserInput {
  addedAt: DateTime
  album: AlbumCreateNestedOneWithoutMembersInput!
  role: AlbumRole
}

input UserOnAlbumListRelationFilter {
  every: UserOnAlbumWhereInput
  none: UserOnAlbumWhereInput
  some: UserOnAlbumWhereInput
}

input UserOnAlbumOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOnAlbumScalarWhereInput {
  AND: [UserOnAlbumScalarWhereInput!]
  NOT: [UserOnAlbumScalarWhereInput!]
  OR: [UserOnAlbumScalarWhereInput!]
  addedAt: DateTimeFilter
  albumId: StringFilter
  role: EnumAlbumRoleFilter
  userId: StringFilter
}

input UserOnAlbumUpdateManyMutationInput {
  addedAt: DateTimeFieldUpdateOperationsInput
  role: EnumAlbumRoleFieldUpdateOperationsInput
}

input UserOnAlbumUpdateManyWithWhereWithoutAlbumInput {
  data: UserOnAlbumUpdateManyMutationInput!
  where: UserOnAlbumScalarWhereInput!
}

input UserOnAlbumUpdateManyWithWhereWithoutUserInput {
  data: UserOnAlbumUpdateManyMutationInput!
  where: UserOnAlbumScalarWhereInput!
}

input UserOnAlbumUpdateManyWithoutAlbumInput {
  connect: [UserOnAlbumWhereUniqueInput!]
  connectOrCreate: [UserOnAlbumCreateOrConnectWithoutAlbumInput!]
  create: [UserOnAlbumCreateWithoutAlbumInput!]
  createMany: UserOnAlbumCreateManyAlbumInputEnvelope
  delete: [UserOnAlbumWhereUniqueInput!]
  deleteMany: [UserOnAlbumScalarWhereInput!]
  disconnect: [UserOnAlbumWhereUniqueInput!]
  set: [UserOnAlbumWhereUniqueInput!]
  update: [UserOnAlbumUpdateWithWhereUniqueWithoutAlbumInput!]
  updateMany: [UserOnAlbumUpdateManyWithWhereWithoutAlbumInput!]
  upsert: [UserOnAlbumUpsertWithWhereUniqueWithoutAlbumInput!]
}

input UserOnAlbumUpdateManyWithoutUserInput {
  connect: [UserOnAlbumWhereUniqueInput!]
  connectOrCreate: [UserOnAlbumCreateOrConnectWithoutUserInput!]
  create: [UserOnAlbumCreateWithoutUserInput!]
  createMany: UserOnAlbumCreateManyUserInputEnvelope
  delete: [UserOnAlbumWhereUniqueInput!]
  deleteMany: [UserOnAlbumScalarWhereInput!]
  disconnect: [UserOnAlbumWhereUniqueInput!]
  set: [UserOnAlbumWhereUniqueInput!]
  update: [UserOnAlbumUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserOnAlbumUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserOnAlbumUpsertWithWhereUniqueWithoutUserInput!]
}

input UserOnAlbumUpdateWithWhereUniqueWithoutAlbumInput {
  data: UserOnAlbumUpdateWithoutAlbumInput!
  where: UserOnAlbumWhereUniqueInput!
}

input UserOnAlbumUpdateWithWhereUniqueWithoutUserInput {
  data: UserOnAlbumUpdateWithoutUserInput!
  where: UserOnAlbumWhereUniqueInput!
}

input UserOnAlbumUpdateWithoutAlbumInput {
  addedAt: DateTimeFieldUpdateOperationsInput
  role: EnumAlbumRoleFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSharedAlbumsInput
}

input UserOnAlbumUpdateWithoutUserInput {
  addedAt: DateTimeFieldUpdateOperationsInput
  album: AlbumUpdateOneRequiredWithoutMembersInput
  role: EnumAlbumRoleFieldUpdateOperationsInput
}

input UserOnAlbumUpsertWithWhereUniqueWithoutAlbumInput {
  create: UserOnAlbumCreateWithoutAlbumInput!
  update: UserOnAlbumUpdateWithoutAlbumInput!
  where: UserOnAlbumWhereUniqueInput!
}

input UserOnAlbumUpsertWithWhereUniqueWithoutUserInput {
  create: UserOnAlbumCreateWithoutUserInput!
  update: UserOnAlbumUpdateWithoutUserInput!
  where: UserOnAlbumWhereUniqueInput!
}

input UserOnAlbumWhereInput {
  AND: [UserOnAlbumWhereInput!]
  NOT: [UserOnAlbumWhereInput!]
  OR: [UserOnAlbumWhereInput!]
  addedAt: DateTimeFilter
  album: AlbumWhereInput
  albumId: StringFilter
  role: EnumAlbumRoleFilter
  user: UserWhereInput
  userId: StringFilter
}

input UserOnAlbumWhereUniqueInput {
  albumId_userId: UserOnAlbumAlbumIdUserIdCompoundUniqueInput
}

input UserOrderByWithRelationInput {
  Like: LikeOrderByRelationAggregateInput
  albums: AlbumOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  email: SortOrder
  id: SortOrder
  photos: PhotoOrderByRelationAggregateInput
  sharedAlbums: UserOnAlbumOrderByRelationAggregateInput
  username: SortOrder
}

input UserUpdateInput {
  Like: LikeUpdateManyWithoutAuthorInput
  albums: AlbumUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutAuthorInput
  sharedAlbums: UserOnAlbumUpdateManyWithoutUserInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAlbumsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAlbumsInput
  create: UserCreateWithoutAlbumsInput
  update: UserUpdateWithoutAlbumsInput
  upsert: UserUpsertWithoutAlbumsInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutLikeInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutLikeInput
  create: UserCreateWithoutLikeInput
  update: UserUpdateWithoutLikeInput
  upsert: UserUpsertWithoutLikeInput
}

input UserUpdateOneRequiredWithoutSharedAlbumsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSharedAlbumsInput
  create: UserCreateWithoutSharedAlbumsInput
  update: UserUpdateWithoutSharedAlbumsInput
  upsert: UserUpsertWithoutSharedAlbumsInput
}

input UserUpdateOneWithoutPhotosInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPhotosInput
  create: UserCreateWithoutPhotosInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPhotosInput
  upsert: UserUpsertWithoutPhotosInput
}

input UserUpdateWithoutAlbumsInput {
  Like: LikeUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutAuthorInput
  sharedAlbums: UserOnAlbumUpdateManyWithoutUserInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentsInput {
  Like: LikeUpdateManyWithoutAuthorInput
  albums: AlbumUpdateManyWithoutAuthorInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutAuthorInput
  sharedAlbums: UserOnAlbumUpdateManyWithoutUserInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutLikeInput {
  albums: AlbumUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutAuthorInput
  sharedAlbums: UserOnAlbumUpdateManyWithoutUserInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutPhotosInput {
  Like: LikeUpdateManyWithoutAuthorInput
  albums: AlbumUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sharedAlbums: UserOnAlbumUpdateManyWithoutUserInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutSharedAlbumsInput {
  Like: LikeUpdateManyWithoutAuthorInput
  albums: AlbumUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutAuthorInput
  username: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutAlbumsInput {
  create: UserCreateWithoutAlbumsInput!
  update: UserUpdateWithoutAlbumsInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
}

input UserUpsertWithoutLikeInput {
  create: UserCreateWithoutLikeInput!
  update: UserUpdateWithoutLikeInput!
}

input UserUpsertWithoutPhotosInput {
  create: UserCreateWithoutPhotosInput!
  update: UserUpdateWithoutPhotosInput!
}

input UserUpsertWithoutSharedAlbumsInput {
  create: UserCreateWithoutSharedAlbumsInput!
  update: UserUpdateWithoutSharedAlbumsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  Like: LikeListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  albums: AlbumListRelationFilter
  comments: CommentListRelationFilter
  email: StringFilter
  id: StringFilter
  photos: PhotoListRelationFilter
  sharedAlbums: UserOnAlbumListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}

"""User visibility of an album"""
enum Visibility {
  LINK
  PRIVATE
  PUBLIC
}
