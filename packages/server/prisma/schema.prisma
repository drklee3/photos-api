generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  username String @unique
  password String

  albums       Album[]
  sharedAlbums UserOnAlbum[]
  photos       Photo[]
  comments     Comment[]
  Like         Like[]
}

model Album {
  id          String     @id @default(uuid())
  title       String
  description String?
  visibility  Visibility @default(PRIVATE)
  viewCount   Int        @default(0)
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photos  PhotoOnAlbum[]
  // Shared users
  members UserOnAlbum[]
}

enum Visibility {
  // Only shared members can see
  PRIVATE
  // Anyone with link can see
  LINK
  // Shows up in public album feed
  PUBLIC
}

model UserOnAlbum {
  album   Album  @relation(fields: [albumId], references: [id])
  albumId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  role    AlbumRole @default(VIEWER)
  addedAt DateTime  @default(now())

  @@id([albumId, userId])
}

enum AlbumRole {
  // Can view but can't comment
  VIEWER
  // Can view and comment
  COMMENTOR
  // Can also upload / delete photos
  EDITOR
}

model Photo {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?

  // Metadata
  fileName String? // Original filename, title user can change
  width    Int
  height   Int
  size     Int
  mimetype MimeType
  exif     Json     @default("{}")

  albums PhotoOnAlbum[]
}

model PhotoOnAlbum {
  album   Album  @relation(fields: [albumId], references: [id])
  albumId String

  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String

  addedAt DateTime @default(now())

  comments Comment[]
  likes    Like[]

  @@id([albumId, photoId])
}

model Like {
  id       String @id @default(uuid())
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())

  photo                 PhotoOnAlbum @relation(fields: [PhotoOnAlbumAlbumId, PhotoOnAlbumPhotoId], references: [albumId, photoId])
  PhotoOnAlbumAlbumId String
  PhotoOnAlbumPhotoId String
}

model Comment {
  id      String @id @default(uuid())
  content String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photo                 PhotoOnAlbum @relation(fields: [PhotoOnAlbumAlbumId, PhotoOnAlbumPhotoId], references: [albumId, photoId])
  PhotoOnAlbumAlbumId String
  PhotoOnAlbumPhotoId String
}

enum MimeType {
  PNG
  JPG
  SVG
  WEBP
  WEBM
  AVIF
  GIF
  MP4
}
